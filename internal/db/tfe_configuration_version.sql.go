// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tfe_configuration_version.sql

package db

import (
	"context"
)

const createTFEConfigurationVersion = `-- name: CreateTFEConfigurationVersion :one
INSERT INTO tfe_configuration_version (
    id,
    auto_queue_runs,
    speculative,
    provisional,
    STATUS,
    upload_data
  )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, auto_queue_runs, speculative, provisional, status, upload_data, created_at, updated_at
`

type CreateTFEConfigurationVersionParams struct {
	ID            string
	AutoQueueRuns bool
	Speculative   bool
	Provisional   bool
	Status        TFEConfigurationVersionStatus
	UploadData    []byte
}

func (q *Queries) CreateTFEConfigurationVersion(ctx context.Context, arg CreateTFEConfigurationVersionParams) (TFEConfigurationVersion, error) {
	row := q.db.QueryRow(ctx, createTFEConfigurationVersion,
		arg.ID,
		arg.AutoQueueRuns,
		arg.Speculative,
		arg.Provisional,
		arg.Status,
		arg.UploadData,
	)
	var i TFEConfigurationVersion
	err := row.Scan(
		&i.ID,
		&i.AutoQueueRuns,
		&i.Speculative,
		&i.Provisional,
		&i.Status,
		&i.UploadData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTFEConfigurationVersion = `-- name: DeleteTFEConfigurationVersion :exec
DELETE FROM tfe_configuration_version
WHERE id = $1
`

func (q *Queries) DeleteTFEConfigurationVersion(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTFEConfigurationVersion, id)
	return err
}

const getTFEConfigurationVersion = `-- name: GetTFEConfigurationVersion :one
SELECT id, auto_queue_runs, speculative, provisional, status, upload_data, created_at, updated_at
FROM tfe_configuration_version
WHERE id = $1
`

func (q *Queries) GetTFEConfigurationVersion(ctx context.Context, id string) (TFEConfigurationVersion, error) {
	row := q.db.QueryRow(ctx, getTFEConfigurationVersion, id)
	var i TFEConfigurationVersion
	err := row.Scan(
		&i.ID,
		&i.AutoQueueRuns,
		&i.Speculative,
		&i.Provisional,
		&i.Status,
		&i.UploadData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTFEConfigurationVersion = `-- name: UpdateTFEConfigurationVersion :one
UPDATE tfe_configuration_version
SET auto_queue_runs = $2,
  speculative = $3,
  provisional = $4,
  STATUS = $5,
  upload_data = $6,
  updated_at = NOW()
WHERE id = $1
RETURNING id, auto_queue_runs, speculative, provisional, status, upload_data, created_at, updated_at
`

type UpdateTFEConfigurationVersionParams struct {
	ID            string
	AutoQueueRuns bool
	Speculative   bool
	Provisional   bool
	Status        TFEConfigurationVersionStatus
	UploadData    []byte
}

func (q *Queries) UpdateTFEConfigurationVersion(ctx context.Context, arg UpdateTFEConfigurationVersionParams) (TFEConfigurationVersion, error) {
	row := q.db.QueryRow(ctx, updateTFEConfigurationVersion,
		arg.ID,
		arg.AutoQueueRuns,
		arg.Speculative,
		arg.Provisional,
		arg.Status,
		arg.UploadData,
	)
	var i TFEConfigurationVersion
	err := row.Scan(
		&i.ID,
		&i.AutoQueueRuns,
		&i.Speculative,
		&i.Provisional,
		&i.Status,
		&i.UploadData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const uploadTFEConfigurationVersion = `-- name: UploadTFEConfigurationVersion :one
UPDATE tfe_configuration_version
SET STATUS = 'uploaded',
  upload_data = $2
WHERE id = $1
RETURNING id, auto_queue_runs, speculative, provisional, status, upload_data, created_at, updated_at
`

type UploadTFEConfigurationVersionParams struct {
	ID         string
	UploadData []byte
}

func (q *Queries) UploadTFEConfigurationVersion(ctx context.Context, arg UploadTFEConfigurationVersionParams) (TFEConfigurationVersion, error) {
	row := q.db.QueryRow(ctx, uploadTFEConfigurationVersion, arg.ID, arg.UploadData)
	var i TFEConfigurationVersion
	err := row.Scan(
		&i.ID,
		&i.AutoQueueRuns,
		&i.Speculative,
		&i.Provisional,
		&i.Status,
		&i.UploadData,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TFEConfigurationVersionStatus string

const (
	TFEConfigurationVersionStatusPending  TFEConfigurationVersionStatus = "pending"
	TFEConfigurationVersionStatusUploaded TFEConfigurationVersionStatus = "uploaded"
)

func (e *TFEConfigurationVersionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TFEConfigurationVersionStatus(s)
	case string:
		*e = TFEConfigurationVersionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TFEConfigurationVersionStatus: %T", src)
	}
	return nil
}

type NullTFEConfigurationVersionStatus struct {
	TFEConfigurationVersionStatus TFEConfigurationVersionStatus
	Valid                         bool // Valid is true if TFEConfigurationVersionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTFEConfigurationVersionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TFEConfigurationVersionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TFEConfigurationVersionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTFEConfigurationVersionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TFEConfigurationVersionStatus), nil
}

type TFEPlanStatus string

const (
	TfePlanStatusPending       TFEPlanStatus = "pending"
	TfePlanStatusManagedQueued TFEPlanStatus = "managed_queued"
	TfePlanStatusQueued        TFEPlanStatus = "queued"
	TfePlanStatusRunning       TFEPlanStatus = "running"
	TfePlanStatusErrored       TFEPlanStatus = "errored"
	TfePlanStatusCanceled      TFEPlanStatus = "canceled"
	TfePlanStatusFinished      TFEPlanStatus = "finished"
	TfePlanStatusUnreachable   TFEPlanStatus = "unreachable"
)

func (e *TFEPlanStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TFEPlanStatus(s)
	case string:
		*e = TFEPlanStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TFEPlanStatus: %T", src)
	}
	return nil
}

type NullTFEPlanStatus struct {
	TFEPlanStatus TFEPlanStatus
	Valid         bool // Valid is true if TFEPlanStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTFEPlanStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TFEPlanStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TFEPlanStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTFEPlanStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TFEPlanStatus), nil
}

type TFERunStatus string

const (
	TfeRunStatusApplied                  TFERunStatus = "applied"
	TfeRunStatusApplying                 TFERunStatus = "applying"
	TfeRunStatusApplyQueued              TFERunStatus = "apply_queued"
	TfeRunStatusCanceled                 TFERunStatus = "canceled"
	TfeRunStatusConfirmed                TFERunStatus = "confirmed"
	TfeRunStatusCostEstimated            TFERunStatus = "cost_estimated"
	TfeRunStatusCostEstimating           TFERunStatus = "cost_estimating"
	TfeRunStatusDiscarded                TFERunStatus = "discarded"
	TfeRunStatusErrored                  TFERunStatus = "errored"
	TfeRunStatusFetching                 TFERunStatus = "fetching"
	TfeRunStatusFetchingCompleted        TFERunStatus = "fetching_completed"
	TfeRunStatusPending                  TFERunStatus = "pending"
	TfeRunStatusPlanned                  TFERunStatus = "planned"
	TfeRunStatusPlannedAndFinished       TFERunStatus = "planned_and_finished"
	TfeRunStatusPlanning                 TFERunStatus = "planning"
	TfeRunStatusPlanQueued               TFERunStatus = "plan_queued"
	TfeRunStatusPolicyChecked            TFERunStatus = "policy_checked"
	TfeRunStatusPolicyChecking           TFERunStatus = "policy_checking"
	TfeRunStatusPolicyOverride           TFERunStatus = "policy_override"
	TfeRunStatusPolicySoftFailed         TFERunStatus = "policy_soft_failed"
	TfeRunStatusPostPlanAwaitingDecision TFERunStatus = "post_plan_awaiting_decision"
	TfeRunStatusPostPlanCompleted        TFERunStatus = "post_plan_completed"
	TfeRunStatusPostPlanRunning          TFERunStatus = "post_plan_running"
	TfeRunStatusPrePlanCompleted         TFERunStatus = "pre_plan_completed"
	TfeRunStatusPrePlanRunning           TFERunStatus = "pre_plan_running"
	TfeRunStatusQueuing                  TFERunStatus = "queuing"
)

func (e *TFERunStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TFERunStatus(s)
	case string:
		*e = TFERunStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TFERunStatus: %T", src)
	}
	return nil
}

type NullTFERunStatus struct {
	TFERunStatus TFERunStatus
	Valid        bool // Valid is true if TFERunStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTFERunStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TFERunStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TFERunStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTFERunStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TFERunStatus), nil
}

type TFEConfigurationVersion struct {
	ID            string
	AutoQueueRuns bool
	Speculative   bool
	Provisional   bool
	Status        TFEConfigurationVersionStatus
	UploadData    []byte
	CreatedAt     pgtype.Timestamp
	UpdatedAt     pgtype.Timestamp
}

type TFEPlan struct {
	ID         string
	RunID      string
	Status     TFEPlanStatus
	LogReadUrl string
	CreatedAt  pgtype.Timestamp
	UpdatedAt  pgtype.Timestamp
}

type TFERun struct {
	ID                     string
	ConfigurationVersionID string
	Status                 TFERunStatus
	CreatedAt              pgtype.Timestamp
	UpdatedAt              pgtype.Timestamp
}

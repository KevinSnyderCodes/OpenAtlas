// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: tfe_plan.sql

package db

import (
	"context"
)

const createTFEPlan = `-- name: CreateTFEPlan :one
INSERT INTO tfe_plan (id, run_id, status, log_read_url)
VALUES ($1, $2, $3, $4)
RETURNING id, run_id, status, log_read_url, created_at, updated_at
`

type CreateTFEPlanParams struct {
	ID         string
	RunID      string
	Status     TFEPlanStatus
	LogReadUrl string
}

func (q *Queries) CreateTFEPlan(ctx context.Context, arg CreateTFEPlanParams) (TFEPlan, error) {
	row := q.db.QueryRow(ctx, createTFEPlan,
		arg.ID,
		arg.RunID,
		arg.Status,
		arg.LogReadUrl,
	)
	var i TFEPlan
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.Status,
		&i.LogReadUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTFEPlan = `-- name: DeleteTFEPlan :exec
DELETE FROM tfe_plan
WHERE id = $1
`

func (q *Queries) DeleteTFEPlan(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteTFEPlan, id)
	return err
}

const getTFEPlan = `-- name: GetTFEPlan :one
SELECT id, run_id, status, log_read_url, created_at, updated_at
FROM tfe_plan
WHERE id = $1
`

func (q *Queries) GetTFEPlan(ctx context.Context, id string) (TFEPlan, error) {
	row := q.db.QueryRow(ctx, getTFEPlan, id)
	var i TFEPlan
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.Status,
		&i.LogReadUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTFEPlanByRunID = `-- name: GetTFEPlanByRunID :one
SELECT id, run_id, status, log_read_url, created_at, updated_at
FROM tfe_plan
WHERE run_id = $1
`

func (q *Queries) GetTFEPlanByRunID(ctx context.Context, runID string) (TFEPlan, error) {
	row := q.db.QueryRow(ctx, getTFEPlanByRunID, runID)
	var i TFEPlan
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.Status,
		&i.LogReadUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTFEPlans = `-- name: ListTFEPlans :many
SELECT id, run_id, status, log_read_url, created_at, updated_at
FROM tfe_plan
`

func (q *Queries) ListTFEPlans(ctx context.Context) ([]TFEPlan, error) {
	rows, err := q.db.Query(ctx, listTFEPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TFEPlan
	for rows.Next() {
		var i TFEPlan
		if err := rows.Scan(
			&i.ID,
			&i.RunID,
			&i.Status,
			&i.LogReadUrl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTFEPlan = `-- name: UpdateTFEPlan :one
UPDATE tfe_plan
SET log_read_url = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, run_id, status, log_read_url, created_at, updated_at
`

type UpdateTFEPlanParams struct {
	ID         string
	LogReadUrl string
}

func (q *Queries) UpdateTFEPlan(ctx context.Context, arg UpdateTFEPlanParams) (TFEPlan, error) {
	row := q.db.QueryRow(ctx, updateTFEPlan, arg.ID, arg.LogReadUrl)
	var i TFEPlan
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.Status,
		&i.LogReadUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTFEPlanStatus = `-- name: UpdateTFEPlanStatus :one
UPDATE tfe_plan
SET status = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, run_id, status, log_read_url, created_at, updated_at
`

type UpdateTFEPlanStatusParams struct {
	ID     string
	Status TFEPlanStatus
}

func (q *Queries) UpdateTFEPlanStatus(ctx context.Context, arg UpdateTFEPlanStatusParams) (TFEPlan, error) {
	row := q.db.QueryRow(ctx, updateTFEPlanStatus, arg.ID, arg.Status)
	var i TFEPlan
	err := row.Scan(
		&i.ID,
		&i.RunID,
		&i.Status,
		&i.LogReadUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
